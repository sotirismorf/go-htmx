// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: uploads.sql

package schema

import (
	"context"
)

const createUpload = `-- name: CreateUpload :one
INSERT INTO uploads (
  sum, name, type, size
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, sum, name, size, type
`

type CreateUploadParams struct {
	Sum  string
	Name string
	Type Filetype
	Size int32
}

func (q *Queries) CreateUpload(ctx context.Context, arg CreateUploadParams) (Upload, error) {
	row := q.db.QueryRow(ctx, createUpload,
		arg.Sum,
		arg.Name,
		arg.Type,
		arg.Size,
	)
	var i Upload
	err := row.Scan(
		&i.ID,
		&i.Sum,
		&i.Name,
		&i.Size,
		&i.Type,
	)
	return i, err
}

const deleteSingleUpload = `-- name: DeleteSingleUpload :exec
DELETE FROM uploads
WHERE id = $1
`

func (q *Queries) DeleteSingleUpload(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSingleUpload, id)
	return err
}

const selectSingleUpload = `-- name: SelectSingleUpload :many
SELECT id, sum, name, size, type FROM uploads
WHERE id = $1
`

func (q *Queries) SelectSingleUpload(ctx context.Context, id int64) ([]Upload, error) {
	rows, err := q.db.Query(ctx, selectSingleUpload, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Upload
	for rows.Next() {
		var i Upload
		if err := rows.Scan(
			&i.ID,
			&i.Sum,
			&i.Name,
			&i.Size,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUploads = `-- name: SelectUploads :many
SELECT id, sum, name, size, type FROM uploads
ORDER BY id
`

func (q *Queries) SelectUploads(ctx context.Context) ([]Upload, error) {
	rows, err := q.db.Query(ctx, selectUploads)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Upload
	for rows.Next() {
		var i Upload
		if err := rows.Scan(
			&i.ID,
			&i.Sum,
			&i.Name,
			&i.Size,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUploadsOfItemByItemID = `-- name: SelectUploadsOfItemByItemID :many
SELECT id, sum, name, size, type, item_id, upload_id FROM uploads
INNER JOIN item_has_upload on uploads.id = item_has_upload.upload_id
AND item_has_upload.item_id = $1
`

type SelectUploadsOfItemByItemIDRow struct {
	ID       int64
	Sum      string
	Name     string
	Size     int32
	Type     Filetype
	ItemID   int64
	UploadID int64
}

func (q *Queries) SelectUploadsOfItemByItemID(ctx context.Context, itemID int64) ([]SelectUploadsOfItemByItemIDRow, error) {
	rows, err := q.db.Query(ctx, selectUploadsOfItemByItemID, itemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectUploadsOfItemByItemIDRow
	for rows.Next() {
		var i SelectUploadsOfItemByItemIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Sum,
			&i.Name,
			&i.Size,
			&i.Type,
			&i.ItemID,
			&i.UploadID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
