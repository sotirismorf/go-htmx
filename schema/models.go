// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package schema

import (
	"database/sql/driver"
	"fmt"
)

type Filetype string

const (
	FiletypeApplicationPdf Filetype = "application/pdf"
	FiletypeImageJpeg      Filetype = "image/jpeg"
	FiletypeImagePng       Filetype = "image/png"
)

func (e *Filetype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Filetype(s)
	case string:
		*e = Filetype(s)
	default:
		return fmt.Errorf("unsupported scan type for Filetype: %T", src)
	}
	return nil
}

type NullFiletype struct {
	Filetype Filetype
	Valid    bool // Valid is true if Filetype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFiletype) Scan(value interface{}) error {
	if value == nil {
		ns.Filetype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Filetype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFiletype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Filetype), nil
}

type Author struct {
	ID   int64
	Name string
	Bio  *string
}

type Group struct {
	ID       int32
	Name     string
	Location int16
}

type Item struct {
	ID          int64
	Name        string
	Description *string
	Year        int16
}

type ItemHasAuthor struct {
	ItemID   int64
	AuthorID int64
}

type ItemHasUpload struct {
	ItemID   int64
	UploadID int64
}

type Place struct {
	ID   int16
	Name string
}

type Publisher struct {
	ID          int32
	Name        string
	Description *string
}

type Upload struct {
	ID   int64
	Sum  string
	Name string
	Size int32
	Type Filetype
}
