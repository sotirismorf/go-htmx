// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package schema

import (
	"context"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (
  name, bio
) VALUES (
  $1, $2
)
RETURNING id, name, bio
`

type CreateAuthorParams struct {
	Name string
	Bio  *string
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {
	row := q.db.QueryRow(ctx, createAuthor, arg.Name, arg.Bio)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const createItem = `-- name: CreateItem :one
INSERT INTO items (
  name, description
) VALUES (
  $1, $2
)
RETURNING id, name, description
`

type CreateItemParams struct {
	Name        string
	Description *string
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRow(ctx, createItem, arg.Name, arg.Description)
	var i Item
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const createItemHasAuthorRelationship = `-- name: CreateItemHasAuthorRelationship :one
INSERT INTO item_has_author (
  item_id, author_id
) VALUES (
  $1, $2
)
RETURNING item_id, author_id
`

type CreateItemHasAuthorRelationshipParams struct {
	ItemID   int64
	AuthorID int64
}

func (q *Queries) CreateItemHasAuthorRelationship(ctx context.Context, arg CreateItemHasAuthorRelationshipParams) (ItemHasAuthor, error) {
	row := q.db.QueryRow(ctx, createItemHasAuthorRelationship, arg.ItemID, arg.AuthorID)
	var i ItemHasAuthor
	err := row.Scan(&i.ItemID, &i.AuthorID)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAuthor, id)
	return err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM items
WHERE id = $1
`

func (q *Queries) DeleteItem(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteItem, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, name, bio FROM authors
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, id int64) (Author, error) {
	row := q.db.QueryRow(ctx, getAuthor, id)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const getItem = `-- name: GetItem :one
SELECT id, name, description FROM items
WHERE id = $1
`

func (q *Queries) GetItem(ctx context.Context, id int64) (Item, error) {
	row := q.db.QueryRow(ctx, getItem, id)
	var i Item
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name, bio FROM authors
ORDER BY name
`

func (q *Queries) ListAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.Query(ctx, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name, &i.Bio); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItems = `-- name: ListItems :many
SELECT id, name, description FROM items
ORDER BY name
`

func (q *Queries) ListItems(ctx context.Context) ([]Item, error) {
	rows, err := q.db.Query(ctx, listItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItemsWithAuthors = `-- name: ListItemsWithAuthors :many

SELECT items.id, items.name, items.description,
CAST(
  CASE
    WHEN (array_length(array_remove(array_agg(authors.id), null), 1) > 0)
    THEN jsonb_agg((authors.id, authors.name))::jsonb
  END
AS jsonb) as authors
FROM items
left join item_has_author on items.id = item_has_author.item_id
left join authors on item_has_author.author_id = authors.id
group by items.id
`

type ListItemsWithAuthorsRow struct {
	ID          int64
	Name        string
	Description *string
	Authors     []byte
}

// https://github.com/sqlc-dev/sqlc/issues/3238
func (q *Queries) ListItemsWithAuthors(ctx context.Context) ([]ListItemsWithAuthorsRow, error) {
	rows, err := q.db.Query(ctx, listItemsWithAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListItemsWithAuthorsRow
	for rows.Next() {
		var i ListItemsWithAuthorsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Authors,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSingleItemWithAuthors = `-- name: ListSingleItemWithAuthors :one
SELECT items.id, items.name, items.description,
CAST(
  CASE
    WHEN (array_length(array_remove(array_agg(authors.id), null), 1) > 0)
    THEN jsonb_agg((authors.id, authors.name))::jsonb
  END
AS jsonb) as authors
FROM items
left join item_has_author on items.id = item_has_author.item_id
left join authors on item_has_author.author_id = authors.id
where items.id = $1
group by items.id
`

type ListSingleItemWithAuthorsRow struct {
	ID          int64
	Name        string
	Description *string
	Authors     []byte
}

func (q *Queries) ListSingleItemWithAuthors(ctx context.Context, id int64) (ListSingleItemWithAuthorsRow, error) {
	row := q.db.QueryRow(ctx, listSingleItemWithAuthors, id)
	var i ListSingleItemWithAuthorsRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Authors,
	)
	return i, err
}

const updateAuthor = `-- name: UpdateAuthor :exec
UPDATE authors
set name = $2,
bio = $3
WHERE id = $1
`

type UpdateAuthorParams struct {
	ID   int64
	Name string
	Bio  *string
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) error {
	_, err := q.db.Exec(ctx, updateAuthor, arg.ID, arg.Name, arg.Bio)
	return err
}
