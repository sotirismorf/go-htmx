package views

import (
	"github.com/invopop/ctxi18n/i18n"
	"github.com/sotirismorf/go-htmx/components"
	"github.com/sotirismorf/go-htmx/models"
	"strconv"
)

templ Search(
	items []models.TemplItemResultCard,
	pagination components.TemplPagination,
	sortOptions []components.SelectOption,
	fieldOptions []components.SelectOption,
) {
	<form
		class="htmx-search inline-flex items-center gap-x-4 w-full"
		hx-get="/search"
		hx-include=".htmx-search"
		hx-push-url="true"
		hx-swap="outerHTML"
		hx-target="#search-results"
	>
		<div class="bg-black ring-1 ring-white has-[:focus]:ring-2 has-[:focus]:ring-fuchsia-400 py-2 px-3 mx-4 sm:mx-0 my-4 rounded-md flex items-center w-full">
			@components.IconMagnifyingGlass()
			<input
				class="bg-transparent outline-none px-3 text-xl font-bold w-full"
				type="text"
				name="query"
				value=""
				autocomplete="off"
				placeholder={ i18n.T(ctx, "search.placeholder") }
			/>
		</div>
	</form>
	<form
		class="htmx-search flex flex-wrap justify-end gap-x-2 gap-y-2 mx-4 sm:mx-0 text-sm"
		hx-get="/search"
		hx-include=".htmx-search"
		hx-push-url="true"
		hx-swap="outerHTML"
		hx-target="#search-results"
		hx-trigger="change"
	>
		@components.DahliaSelectPill("field", "Search", fieldOptions, false)
		@components.DahliaSelectPill("And", "This", fieldOptions, false)
		@components.DahliaSelectPill("Another", "That", fieldOptions, false)
		@components.DahliaSelectPill("sort", "Sort", sortOptions, false)
	</form>
	@SearchResults(pagination, items)
}

templ SearchResults(pagination components.TemplPagination, items []models.TemplItemResultCard) {
	<div class="mt-4" id="search-results">
		<div class="flex items-center justify-between flex-col gap-y-2 sm:flex-row m-4 sm:mx-0">
			<p>{ i18n.N(ctx, "search.results.count", int(pagination.TotalItems), i18n.M{"count": int(pagination.TotalItems) }) }</p>
			if pagination.TotalPages > 0 {
				@components.Pagination(pagination, 1)
			}
		</div>
		<div class="bg-black border-y border-y-white sm:border sm:border-white divide-y divide-white sm:rounded-md">
			if pagination.TotalItems == 0 {
				<div>oops....</div>
			}
			for _, v := range items {
				<div class="px-4 pt-3 pb-4 sm:px-6 sm:pt-4 sm:pb-6">
					<div class="mb-3">
						<a
							class="hover:underline font-bold text-xl sm:text-2xl"
							href={ templ.SafeURL("/item/" + v.ID) }
						>{ v.Name }</a>
					</div>
					<div class="flex">
						<div class="mr-4">
							<a href={ "/item/1" }>
								<img class="object-contain h-24 sm:h-40 select-none" src={ v.ThumbnailLink } alt=""/>
							</a>
						</div>
						<div class="flex-grow flex flex-col justify-between">
							<div>
								<div>
									if len(v.Authors) != 0 {
										<div class="text-sm sm:text-base">
											for i, k := range v.Authors {
												<div class="inline-block">
													<a
														class="hover:underline"
														href={ templ.SafeURL(k.AuthorLink) }
													>{ k.Name }</a>
												</div>
												if i < len(v.Authors) - 1 {
													<span>, </span>
												}
											}
										</div>
									}
									if len(v.Uploads) != 0 {
										<div class="text-sm sm:text-base">
											<span>{ strconv.FormatInt(int64(len(v.Uploads)), 10) }</span>
											if len(v.Uploads) == 1 {
												<span>file</span>
											} else {
												<span>files</span>
											}
										</div>
									}
								</div>
							</div>
							<p class="text-sm sm:text-lg text-right">{ v.Year }</p>
						</div>
					</div>
				</div>
			}
		</div>
	</div>
}
